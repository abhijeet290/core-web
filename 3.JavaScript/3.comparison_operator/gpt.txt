1. What is the difference between == and === in JavaScript?
== â†’ Loose equality
It checks for equality after converting the types (type coercion).


'5' == 5     // true
=== â†’ Strict equality
It checks for equality without type conversion (types must be the same).


'5' === 5    // false
ðŸ“Œ Interview Tip: Always use === for more predictable and bug-free code.

2. Why does null >= 0 return true but null > 0 return false?
null >= 0 â†’ true
Because null is converted to 0 â†’ 0 >= 0 â†’ true

null > 0 â†’ false
Again, null becomes 0 â†’ 0 > 0 â†’ false

ðŸ’¡ But null == 0 is false because == does not convert null to a number.

ðŸ“Œ Weird but true: comparison operators like >=, <, etc., convert null to a number (0), but == treats null as only equal to undefined, nothing else.

3. Whatâ€™s the output of [] == false and why?

[] == false  // true
Why?

false is converted to number 0

[] (empty array) is a non-primitive â†’ it gets converted to string first â†’ ""

Then "" â†’ 0

So it becomes: 0 == 0 â†’ true

ðŸ§  So: [] == false â†’ true (due to type coercion)

4. Can you explain how logical && and || short-circuit?
ðŸ”¹ && (AND) returns the first falsy value, or the last value if all are truthy.

true && 123        // 123
false && 123       // false
'hi' && 0          // 0
ðŸ”¹ || (OR) returns the first truthy value, or the last falsy if none are truthy.

false || 'JS'      // 'JS'
0 || null || 10    // 10
ðŸ§  Short-circuiting means:

In &&, if the first value is falsy, it stops there.

In ||, if the first value is truthy, it stops there.